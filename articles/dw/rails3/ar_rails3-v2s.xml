<?xml-stylesheet type="text/xsl" href="../xsl/5.12/dw-document-html-5.12.xsl"?>
<dw-document xmlns:dw="http://www.ibm.com/developerWorks/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../schema/5.12/dw-document-5.12.xsd">

<dw-article local-site="worldwide" skill-level="3">
<id cma-id="12345" domino-uid="" content-id="" original="yes" />
<keywords content="Martin Streicher, Rails 3, Rails"/>

<meta-dctype>
	<cma-defined-type />
</meta-dctype>

<meta-dcsubject>
	<cma-defined-subject />
</meta-dcsubject>

<meta-last-updated day="27" month="02" year="2010" initials="ma" />

<content-area-primary name="webservices" />

<title>All aboard! An introduction to Rails 3</title>

<author jobtitle="Software Developer" email-cc="" email="martin.streicher@gmail.com">
	<bio>Martin Streicher is a freelance Ruby on Rails developer and the former Editor-in-Chief of
		<i><a href="http://www.linux-mag.com">Linux Magazine</a>.</i> Martin holds a
		Masters of Science degree in computer science from Purdue University and has
		programmed UNIX-like systems since 1986. He collects art and toys. You can reach
		Martin at <a href="mailto:martin.streicher@gmail.com">martin.streicher@gmail.com</a>.
	</bio>
	<img alt="Martin Streicher" src="images\Bio_mstreicher.jpg"/>
	<author-name>
		<GivenName>Martin</GivenName>
		<FamilyName>Streicher</FamilyName>
	</author-name>
	<company-name>Pixel, Byte, and Comma</company-name>
</author>

<date-published day="01" month="03" year="2010" />

<abstract>
  The impending release of Ruby on Rails version 3 both refines and expands the capabilities of the popular Web application framework. Offering cleaner controllers and savvier SQL queries, you can expect to write less code than before. Better yet, almost all of the components of Rails 3 can be included in any Ruby application. Here's a look at what's changed for the better.
</abstract>
<!-- MARTIN: PLEASE PROVIDE AN ABSTRACT. -MA -->
<!-- MICHELLE: DONE. -MS-->

<docbody>
	<p>Over the past two years, the Ruby on Rails application framework has garnered a cottage
		industry of hosting and service providers, an expansive and impressive array of
		development tools, and a wide variety of complementary libraries<mdash />called
		<i>gems</i> and <i>plug-ins</i> in Ruby parlance<mdash />that increase the capabilities
		of the software. For example, Engine Yard and Heroku are just two companies that
		provide virtual and headache-free Rails software hosting; the colorfully named
		Oink and Bullet profile memory usage and performance, respectively; and Clearance
		and Sunspot provide off-the-shelf authentication and fast, indexed search.
	</p>

<sidebar width="30%">
	<heading refname="fua" type="sidebar">Frequently used acronyms</heading>
		<ul>
			<li><b>CRUD:</b> Create, read, update, delete</li>
			<li><b>HTML:</b> Hypertext Markup Language</li>
			<li><b>REST:</b> Representational State Transfer</li>
		</ul>
</sidebar>

	<p>Since 2007, the Rails community has grown, too. The global legion of Rails developers is
		vibrant, helpful, and always eager to improve the software. Indeed, it's not hyperbole
		to say that the community is hell-bent on improving Rails, with coders constantly
		leapfrogging one another to build something better. Iteration after iteration, features
		quickly evolve from nascent to utilitarian to powerful to elegant and ultimately to
		indispensable. In many instances, gems and plug-ins the community finds essential
		are enshrined in the Rails core. Rails's <i>named scopes</i><mdash />a query
		shorthand<mdash />followed that very trajectory, as did <i>nested forms,</i> a fairly
		recent addition that supplanted previous attempts to create and edit multiple models
		within the same HTML form. Indeed, perhaps the most difficult task for Rails developers
		is keeping pace with change. (Luckily, a number of weekly Ruby and Ruby on Rails
		podcasts organize and present trends and best practices.)
	</p>
	<p>Rails version 3, the next major release of Rails, continues the rapid advancement of the
		toolkit. True to its heritage, the software remains "opinionated," preferring convention
		over configuration. Rails's core components<mdash />RESTful routes, relationships,
		validations, templates, and database abstractions<mdash />persist. However, much
		of the internals of those units have been rewritten or refined. Most notably, and
		borrowing heavily from Merb, many of Rails's essential features are no longer tightly
		coupled. For instance, the data-validation conveniences previously available only to
		a Rails application are now stand-alone components and can be included in vanilla
		Ruby code. Controller capabilities, such as rendering partials and templates, are also
		independent and can be embedded in any library.
	</p>
	<p>In this article, you take a look at Rails 3 and its many changes and additions and create
		a new Rails 3 application from scratch. As of the middle of February 2010, Rails 3 is
		a beta prerelease, and the core team is collecting patches, feedback, and
		documentation to prepare an official release prior to the start of summer. Nonetheless,
		the current incarnation of Rails 3 is sufficient for building applications and learning
		about the multitude of new capabilities.
	</p>

	<heading refname="changes" type="major">Big changes, little changes</heading>
		<p>The number of changes in Rails 3 is too significant to recount fully here. To read
			a complete list along with supplemental material, consult the Rails 3 Release
			Notes (see <a href="#resources">Resources</a> for a link). Here, however, are
			some of the alterations most likely to affect developers:
		</p>
			<ul>
				<li><b>One command to rule them all.</b> Rails 3 obsolesces the family
					of scripts (script/server, script/generate, and the rest) found in
					each application and replaces it with a single command, aptly
					named <code type="inline">rails</code>. For example, where you
					previously typed <code type="inline">./script/console</code>, you
					now type <code type="inline">rails console</code>. The <code type="inline">rails</code>
					command also generates new applications, as it did before. Its
					operation differs according to whether it's launched amid an existing
					Rails application.
				</li>
				<li><b>A manifest solution for dependencies.</b> Reconciling and resolving
					gem dependencies is something of a knotty problem. Gem revisions
					can vary from one system to another, as can the collection of available
					gems. With such variety, it can be difficult to widely deploy or share a
					Rails application. Rails 3 introduces <code type="inline">Bundler</code>,
					a special utility for managing dependencies (thus obsolescing
					<code type="inline">config.gem</code>). You declare dependences in
					a catalog named <i>Gemfile</i> in the root of your application. <code type="inline">Bundler</code>
					downloads and stores all the named gems. You can even "pack" the gems
					in your application to preclude downloads from external repositories.
				</li>
				<li><b>Queries without the queries.</b> Historically, Rails had made good use
					of domain-specific languages (DSLs) throughout<mdash />think of
					<code type="inline">has_one</code> or
					<code type="inline">validates_numericality_of</code><mdash />with
					one notable exception: database queries. Certainly, Rails's dynamic finders
					ease the burden, but code littered with option hashes replete with
					<code type="inline">:conditions</code>, <code type="inline">:order</code>,
					and <code type="inline">:limit</code> are common, as are
					<code type="inline">find_by_sql</code> statements. Rails 3 incorporates
					<i>relational algebra,</i> a DSL designed to express queries. Primitives
					include <code type="inline">project</code> (to select columns),
					<code type="inline">where</code> (to express conditions),
					<code type="inline">join</code> (to specify relationships),
					<code type="inline">take</code> and <code type="inline">skip</code>
					(for limits and offsets, respectively), and <code type="inline">group</code>
					(for aggregation), among others.
				</li>
				<li><b>Controllers sans that fussy boilerplate code.</b> The core actions of a
					Rails controller<mdash /><code type="inline">new</code>,
					<code type="inline">create</code>, <code type="inline">edit</code>,
					<code type="inline">update</code><mdash />typically do not vary, especially
					if the controller is largely there for CRUD operations. In fact, the output
					of the controller generator, <code type="inline">./script/generate controller</code>,
					often suffices without further modification. Given those similarities, Rails 3
					introduces the <code type="inline">Responder</code> to simplify the code
					further. For example, a few lines of code is all that's needed for a
					<code type="inline">create</code> action:


<code type="section" width="50%">
  class PostsController
    respond_to :html, :xml

    def create
      @post = Post.create(params[:post])
      respond_with(@post)
    end
  end
</code>

					<p>In this snippet, <code type="inline">respond_with(@post)</code> routes
						to <code type="inline">show</code> to display the new record if
						<code type="inline">@post</code> was saved successfully or to
						<code type="inline">new</code> if the object failed validations, say.
					</p>
				</li>
			</ul>
		<p>Again, this is just a small sampling. You can find examples of these new features and
			more in the next section, in which you build a Rails 3 application from scratch.
		</p>

	<heading refname="app" type="major">A first Rails 3 application</heading>
		<p>To run Rails 3, your system must have either Ruby version 1.8.7 or Ruby version 1.9.2
			or a newer release of the programming language and its attendant libraries and
			interpreter. It is also beneficial to have the Git software version control system
			installed on your machine, as Rails 3 and many other influential Rails projects are
			maintained in Git. Your system should also have a database engine, such as SQLite
			(version 3), MySQL, or PostgreSQL. A Web server is not required to develop a Rails
			application, but it's usually part of a production deployment.
		</p>
		<p>To create a Rails 3 application, you must have the Rails 3 prerelease gem and all its
			dependencies. At the moment, you can install the required components with just
			a few commands (see <a href="#list1">Listing 1</a>). (Check the documentation
			for Rails 3 before you continue, as the specifics may change from release to
			release.)
		</p>

<code type="section" width="65%">
	<heading refname="list1" type="code">Listing 1. The Rails 3 prerelease gem and dependencies</heading>
$ gem install rails3b
Due to a rubygems bug, you must uninstall all older versions of bundler for 0.9 to work
Successfully installed mime-types-1.16
Successfully installed mail-2.1.2
Successfully installed text-hyphen-1.0.0
Successfully installed text-format-1.0.0
Successfully installed memcache-client-1.7.8
Successfully installed rack-1.1.0
Successfully installed rack-mount-0.4.7
Successfully installed abstract-1.0.0
Successfully installed erubis-2.6.5
Successfully installed i18n-0.3.3
Successfully installed tzinfo-0.3.16
Successfully installed bundler-0.9.5
Successfully installed thor-0.13.1
Successfully installed rails3b-3.0.1
14 gems installed

$ gem install arel --pre
Successfully installed activesupport-3.0.0.beta
Successfully installed arel-0.2.pre
2 gems installed

$ gem install rails --pre
Successfully installed activemodel-3.0.0.beta
Successfully installed actionpack-3.0.0.beta
Successfully installed activerecord-3.0.0.beta
Successfully installed activeresource-3.0.0.beta
Successfully installed actionmailer-3.0.0.beta
Successfully installed railties-3.0.0.beta
Successfully installed rails-3.0.0.beta
7 gems installed
</code>

		<p>The next step is to generate the application<mdash />a small wiki, shown in
			<a href="#list2">Listing 2</a>. The application creates and administers articles.
			Each article has a title and some prose, and you create a new article simply by
			creating a reference to it from the body of an existing page. A reference is any
			camel case word, such as <i>TheSolarSystem</i> or <i>TheOscars.</i>
		</p>

<code type="section" width="65%">
	<heading refname="list2" type="code">Listing 2. The wiki Rails application</heading>
$ rails wiki
</code>

		<p>If you run <code type="inline">ls -lR</code> to see the contents of the application,
			a few new files stand out:
		</p>
			<ul>
				<li><i>Gemfile</i> is the gem manifest mentioned earlier. At a minimum,
					the file must contain two lines: one to point to the source of the
					Rails 3 beta gem and one to bundle the Rails 3 beta gem itself. You
					probably want a third line (at least) to connect to a database:<br /><br />

<code type="section" width="50%">
source 'http://gemcutter.org'
gem "rails", "3.0.0.beta"
gem "sqlite3-ruby", :require => "sqlite3"
</code>

				</li>
				<li><i>config/application.rb</i> contains many of the options previously
					found in config/environment.rb. The latter remains but is largely
					deprecated. One significant addition to config/application.rb is the
					<i>generators block</i>:<br /><br />

<code type="section" width="50%">
config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :test_unit, :fixture => true
end
</code>

					<p>Your Rails 3 application can use one of a number of compatible
						object-relational mappers (ORM), template engines, and test frameworks.
						The generators block specifies your preferences for the application
						and invokes the proper generator for your models, views, and so on.
					</p>
				</li>
				<li><i>db/seeds.rb</i> is not new to Rails 3, but it's important to mention, because
					it was added fairly recently (it was introduced in Rails version 2.3.4). If
					your application requires initial data to run properly, such as an administrative
					user, price codes, or static pages, create that data in db/seeds.rb and run
					the task <code type="inline">rake db:seed</code>. Prior to the seed file,
					no convention existed for initialization, and many developers put code in
					migrations, clouding the differentiation between creating the database
					and populating it.
				</li>
				<li><i>config.ru,</i> found in the root of each Rails 3 application, is a so-called
					<i>rackup</i> file, or a configuration for a Rack-based application. Rails
					3 is a Rack application and is compatible with any Web server that also
					supports Rack. In general, you need not touch config.ru unless you want
					to add other Rack components.
				</li>
			</ul>
		<p>There are a few other new files; most, though, should seem familiar from Rails version 2.3.
			The config/routes.rb file serves the same purpose as before, albeit with a much-simplified
			and more Ruby-like flavor. You'll see an example momentarily.
		</p>
		<p>After you generate the application and edit Gemfile to capture your dependencies, your
			next step is to collect the gems your application requires. That's the job of the
			new utility, <code type="inline">bundle</code> (see <a href="#list3">Listing 3</a>).
		</p>

<code type="section" width="65%">
	<heading refname="list3" type="code">Listing 3. Collect the required gems</heading>
$ bundle
installFetching source index from http://gemcutter.org
Resolving dependencies
Installing abstract (1.0.0) from system gems
Installing actionmailer (3.0.0.beta) from system gems
Installing actionpack (3.0.0.beta) from system gems
Installing activemodel (3.0.0.beta) from system gems
Installing activerecord (3.0.0.beta) from system gems
Installing activeresource (3.0.0.beta) from system gems
Installing activesupport (3.0.0.beta) from system gems
Installing arel (0.2.1) from rubygems repository at http://gemcutter.org
Installing builder (2.1.2) from system gems
Installing bundler (0.9.7) from rubygems repository at http://gemcutter.org
Installing erubis (2.6.5) from system gems
Installing i18n (0.3.3) from system gems
Installing mail (2.1.2) from system gems
Installing memcache-client (1.7.8) from system gems
Installing mime-types (1.16) from system gems
Installing rack (1.1.0) from system gems
Installing rack-mount (0.4.7) from system gems
Installing rack-test (0.5.3) from system gems
Installing rails (3.0.0.beta) from system gems
Installing railties (3.0.0.beta) from system gems
Installing rake (0.8.7) from system gems
Installing sqlite3-ruby (1.2.5) from rubygems repository at
    http://gemcutter.org with native extensions
<!-- MARTIN: IS THE ABOVE LINE BREAK OKAY? MA -->
<!-- MICHELLE: YES, IT IS FINE. MS -->
Installing text-format (1.0.0) from system gems
Installing text-hyphen (1.0.0) from system gems
Installing thor (0.13.3) from rubygems repository at http://gemcutter.org
Installing tzinfo (0.3.16) from system gems
Your bundle is complete!
</code>

		<p>The <code type="inline">bundle</code> utility, short for <i>Bundler,</i> downloads
			and installs all the gems named in Gemfile and any of those gems' prerequisites
			(see <a href="#list4">Listing 4</a>). The <code type="inline">bundle</code> utility
			can also copy all those dependencies into your application, making your code base
			self-sufficient. Specifically, if you run <code type="inline">bundle pack</code>,
			the Bundler copies the corpus of gems to vendor/cache.
		</p>

<code type="section" width="65%">
	<heading refname="list4" type="code">Listing 4. Running the bundle utility</heading>
$ bundle pack
Copying .gem files into vendor/cache
  * bundler-0.9.7.gem
  * thor-0.13.3.gem
  * abstract-1.0.0.gem
  * mime-types-1.16.gem
  * text-hyphen-1.0.0.gem
  * rack-mount-0.4.7.gem
  * rake-0.8.7.gem
  * text-format-1.0.0.gem
  * tzinfo-0.3.16.gem
  * rack-test-0.5.3.gem
  * builder-2.1.2.gem
  * erubis-2.6.5.gem
  * memcache-client-1.7.8.gem
  * rack-1.1.0.gem
  * sqlite3-ruby-1.2.5.gem
  * i18n-0.3.3.gem
  * activesupport-3.0.0.beta.gem
  * arel-0.2.1.gem
  * mail-2.1.2.gem
  * activemodel-3.0.0.beta.gem
  * activerecord-3.0.0.beta.gem
  * actionpack-3.0.0.beta.gem
  * railties-3.0.0.beta.gem
  * actionmailer-3.0.0.beta.gem
  * activeresource-3.0.0.beta.gem
  * rails-3.0.0.beta.gem

$ ls vendor/cache
abstract-1.0.0.gem		memcache-client-1.7.8.gem
actionmailer-3.0.0.beta.gem	mime-types-1.16.gem
actionpack-3.0.0.beta.gem	rack-1.1.0.gem
activemodel-3.0.0.beta.gem	rack-mount-0.4.7.gem
activerecord-3.0.0.beta.gem	rack-test-0.5.3.gem
activeresource-3.0.0.beta.gem	rails-3.0.0.beta.gem
activesupport-3.0.0.beta.gem	railties-3.0.0.beta.gem
arel-0.2.1.gem			rake-0.8.7.gem
builder-2.1.2.gem		sqlite3-ruby-1.2.5.gem
bundler-0.9.7.gem		text-format-1.0.0.gem
erubis-2.6.5.gem		text-hyphen-1.0.0.gem
i18n-0.3.3.gem			thor-0.13.3.gem
mail-2.1.2.gem			tzinfo-0.3.16.gem
</code>

		<p>Think of vendor/cache as your application's own gem repository. You can move
			the code base anywhere and have the gem software and versions you depend
			on<mdash />no remote repositories required. For example, if you run
			<code type="inline">bundle install</code> after <code type="inline">bundle pack</code>,
			the gems are installed from your application repository to your system (see
			<a href="#list5">Listing 5</a>).
		</p>

<code type="section" width="65%">
	<heading refname="list5" type="code">Listing 5. Installing the gems</heading>
Fetching source index from http://gemcutter.org
Resolving dependencies
Installing abstract (1.0.0) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Installing actionmailer (3.0.0.beta) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Installing actionpack (3.0.0.beta) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
...
Installing thor (0.13.3) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Installing tzinfo (0.3.16) from .gem files at
  /Users/strike/projects/rails3/wiki/vendor/cache
Your bundle is complete!
</code>

	<heading refname="wiki" type="major">Working on the wiki</heading>
		<p>To create the application, generate a scaffold for a page, create the database, seed
			the database with an initial page, and set up the necessary routes (see
			<a href="#list6">Listing 6</a>). To keep things simple, a wiki page record is
			limited to a handful of fields: a title, a slug (an abbreviation of the title), a
			body, and timestamps to record when the page was created and when it was last
			modified. The title and slug are string fields; prose is a text field, and the
			timestamps are date and time fields. (Of course, a real wiki would have additional
			fields, such as the most recent author and previous revisions of the page. For
			brevity, this example also omits users and sessions, formatting, and any kind of
			authentication and authorization.) You can generate an initial model, a set of
			views, and a controller with the command <code type="inline">rails generate scaffold</code>.
		</p>

<code type="section" width="65%">
	<heading refname="list6" type="code">Listing 6. The full wiki application</heading>
$ rails generate scaffold page title:string slug:string body:text --timestamps
      invoke  active_record
      create    db/migrate/20100221115613_create_pages.rb
      create    app/models/page.rb
      invoke    test_unit
      create      test/unit/page_test.rb
      create      test/fixtures/pages.yml
       route  resources :pages
      invoke  scaffold_controller
      create    app/controllers/pages_controller.rb
      invoke    erb
      create      app/views/pages
      create      app/views/pages/index.html.erb
      create      app/views/pages/edit.html.erb
      create      app/views/pages/show.html.erb
      create      app/views/pages/new.html.erb
      create      app/views/pages/_form.html.erb
      create      app/views/layouts/pages.html.erb
      invoke    test_unit
      create      test/functional/pages_controller_test.rb
      invoke    helper
      create      app/helpers/pages_helper.rb
      invoke      test_unit
      create        test/unit/helpers/pages_helper_test.rb
      invoke  stylesheets
      create    public/stylesheets/scaffold.css
</code>

		<p>If you're wondering what happened to <code type="inline">./script/generate</code>,
			recall that it's now subsumed by the omnipotent <code type="inline">rails</code>
			command.
		</p>
		<p>Run <code type="inline">rake db:create db:migrate</code> to create the database:</p>

<code type="section" width="65%">
$ rake db:create db:migrate
==  CreatePages: migrating ====================================================
-- create_table(:pages)
   -> 0.0010s
==  CreatePages: migrated (0.0011s) ===========================================
</code>

		<p>The wiki exists now, but it's empty. Add an initial page to serve as an anchor for
			all other pages. Edit the file db/seeds.rb, and write code to create a new page,
			as shown in <a href="#list7">Listing 7</a>.
		</p>

<code type="section" width="65%">
	<heading refname="list7" type="code">Listing 7. The wiki anchor page</heading>
Page.create(
  :title    => 'The Marx Brothers Wiki',
  :slug     => 'Home',
  :body     => 'An encyclopedic guide to the Marx Brothers.')
</code>

		<p>Run <code type="inline">rake db:seed</code> to execute the code. You can verify
			the page with a quick glance using <code type="inline">rails console</code>, as
			shown in <a href="#list8">Listing 8</a>.
		</p>

<code type="section" width="65%">
	<heading refname="list8" type="code">Listing 8. Verify the anchor page</heading>
$ rake db:seed
(in /Users/strike/projects/rails3/wiki)

$ rails console
Loading development environment (Rails 3.0.0.beta)
irb(main):001:0> Page.all
=> [#&lt;Page id: 1, title: "The Marx Brothers Wiki", slug: "Home",
    body: "An encyclopedic guide to the Marx Brothers.",
    created_at: "2010-02-21 12:24:43", updated_at: "2010-02-21 12:24:43"&gt;]
<!-- MARTIN: ARE THE ABOVE LINE BREAKS OKAY? -MA -->
<!-- MICHELLE: YES. -MS -->
</code>

		<p>Before proceeding with the code, set up the routes. Two routes are required: a
			default route to find the home page and another route to find a page by its
			slug. <a href="#list9">Listing 9</a> shows the final config/routes.rb file.
		</p>

<code type="section" width="65%">
	<heading refname="list9" type="code">Listing 9. config/routes.rb (final)</heading>
Wiki::Application.routes.draw do |map|
  resources :pages
  root :to => "pages#show"
end
</code>

		<p>The <code type="inline">rails generate scaffold page</code> line in <a href="#lsit6">Listing 6</a>
			automatically created the route in line 2, which is RESTful. You must add the
			route in line 3 manually. The syntax to specify a default "root" of the site route
			is new in Rails 3. Line 3 says, "Map the route '/' to the 'show' method of the pages
			controller." The code for the <code type="inline">show</code> method finds the
			home page in the database and displays it.
		</p>
		<p>After adding the new root route, delete the file public/index.html to preclude conflicts:</p>

<code type="section" width="65%">
$ rm public/index.html
</code>

		<p>Now, turn your attention to the page controller. The code for a controller in Rails 3
			can be exceedingly spartan. <a href="#list10">Listing 10</a> shows the initial
			implementation of the controller, with a sole <code type="inline">show</code>
			method.
		</p>

<code type="section" width="65%">
	<heading refname="list10" type="code">Listing 10. A Rails 3 controller</heading>
class PagesController &lt; ApplicationController
  respond_to :html

  def show
    @page = Page.where( :slug => ( params[:id] || 'Home' ) ).first
    respond_with( @page )
  end
end
</code>

		<p>As you can see, all the boilerplate typically found in a Rails 2 controller is missing.
			<code type="inline">respond_to</code> lists the formats the controller supports;
			here, it responds solely to requests for HTML. <code type="inline">respond_with</code>
			is shorthand for the logic to decide how the controller should proceed.
		</p>
		<p>The syntax for the query is also quite different. The lookup is an example of the Rails 3
			relational algebra. You may be wondering why the <code type="inline">first</code>
			suffix is required. <code type="inline">where</code> and other operands that
			express the query do not actually cause the query to execute. Instead, the query
			sits idly by until the data is actually needed. This is <i>lazy loading,</i> or deferring
			the query as long as possible. <code type="inline">first</code> sparks an actual
			inquiry from the database.
		</p>
		<p>If you run the application now, you should see something similar to <a href="#fig1">Figure 1</a>.</p>

			<figure>
				<heading refname="fig1" type="figure">Figure 1. The Rails 3 wiki application</heading>
				<img src="images/fig1.jpg" alt="Wiki application"/>
			</figure>

		<p>Now, add more code to the controller. <a href="#list11">Listing 11</a> shows the
			complete controller.
		</p>

<code type="section" width="65%">
	<heading refname="list11" type="code">Listing 11. The complete Rails 3 controller</heading>
class PagesController &lt; ApplicationController
  respond_to :html
  before_filter :get_page, :except =&gt; [ :create ]

  def create
    respond_with( @page = Page.create( params[ :page ] ) )
  end

  def edit
  end

  def index
    render :action =&gt; :show
  end

  def show
    @page ||= Page.new( :slug =&gt; params[ :id ] )

    if @page.new_record?
      render :action =&gt; :new
    else
      respond_with( @page )
    end
  end

  def update
    @page.update_attributes( params[ :page ] )
    respond_with( @page )
  end

  private

    def get_page
      @page = Page.where( :slug =&gt; ( params[:id] || 'Home' ) ).first ||
        Page.where( :id =&gt; params[:id] ).first
    end
end
</code>

		<p>In the controller, the <code type="inline">index</code> method merely reflects the
			<code type="inline">show</code> action with no page identifier, thus rendering
			the home page. <code type="inline">show</code> displays a page, given an ID or
			a slug (the lookups for all actions are centralized in <code type="inline">get_page</code>,
			further reducing the amount of code); if a page does not exist, a new page is
			prepared for editing.
		</p>
		<p>The <code type="inline">Page</code> model merely validates that all its fields are
			present:
		</p>

<code type="section" width="65%">
class Page &gt; ActiveRecord::Base
  validates_presence_of :body, :slug, :title
end
</code>

		<p>The work to translate the camel case references to links to other pages occurs in
			the view for the <code type="inline">Page</code> model. A helper function in
			app/helpers/pages_helper.rb does the heavy lifting, keeping the view minimal
			(see <a href="#list12">Listing 12</a>).
		</p>

<code type="section" width="65%">
	<heading refname="list12" type="code">Listing 12. The camel case translation helper function</heading>
module PagesHelper
  def wikify( page )
    return '' if page.body.blank?
    page.body.gsub( /^([A-Z][[:alnum:]]*([A-Z][[:alnum:]]*)+)/ ) do |match|
      link_to( $1, :action => :show, :id =&gt; $1 )
    end
  end
end
</code>

		<p>The view is typical, as shown in <a href="#list13">Listing 13</a>.</p>

<code type="section" width="65%">
	<heading refname="list13" type="code">Listing 13. A typical view</heading>
&lt;p&gt;
  &lt;b&gt;Title:&lt;/b&gt;
  &lt;%= @page.title %&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;Body:&lt;/b&gt;
  &lt;%= raw wikify( @page ) %&gt;
&lt;/p&gt;

&lt;%= link_to 'Edit', edit_page_path(@page) %&gt; |
&lt;%= link_to 'Back', pages_path %&gt;
</code>

		<p>The <code type="inline">raw</code> operator is new to Rails 3. Counter to previous
			releases of Rails, all strings are emitted safe, stripped of HTML, by default. If you
			want to emit a string with HTML, you must use <code type="inline">raw</code>.
		</p>

	<heading refname="switching" type="major">Switching Rails</heading>
		<p>Beyond the improvements and conveniences shown here, Rails 3 offers better performance
			than its predecessors, especially in rendering partials. You can also create your
			own validator classes and take advantage of more streamlined standard validations.
			For instance, this validation, written by Jeremy Macnally, once required four
			separate lines of code:
		</p>

<code type="section" width="65%">
validates :login, :presence => true, :length => {:minimum => 4},
  :uniqueness => true, :format => { :with => /[A-Za-z0-9]+/ }
</code>

		<p>The Rails Guides, the official tutorials for Rails, are currently being updated for Rails 3.
			You can also find extensive instruction and clever solutions on the blogs of Jeremy
			Macnally, Yehuda Katz, Gregg Pollack, and other community leaders (see
			<a href="#resources">Resources</a> for links). A number of popular books are under
			revision for the new release, too, including the seminal "pickaxe" book, <i>Agile
			Web Development with Rails</i> (see <a href="#resources">Resources</a> for a link).
		</p>
</docbody>

<resources>
<!-- MARTIN: PLEASE ADD LINKS. -MA -->
<!-- MICHELLE: ADDED ALL LINKS PER YOUR REQUEST. -MS -->
	<resource resource-category="Get products and technologies">
	  Visit the <a href="http://rubyonrails.org/">Ruby on Rails home page</a> to read
	  more about Rails and to download the software.
	</resource>

	<resource resource-category="Get products and technologies">
	  You can download a copy of the Sunspot text search plug-in for Rails
	  from <a href="http://github.com/outoftime/sunspot">Github</a>.
	</resource>

	<resource resource-category="Get products and technologies">
	  <a href="http://thoughtbot.com/community/">Clearance</a> is a pre-packaged Rails solutions for user authentication.
	</resource>

	<resource resource-category="Get products and technologies">
	  Incorporate <a href="http://github.com/flyerhzm/bullet">Bullet</a> in your application to find queries that
	  are too lazy or too eager.
	</resource>

	<resource resource-category="Get products and technologies">
	  Try the aptly-named <a href="http://github.com/noahd1/oink">Oink</a> to reduce the memory usage of your
	  Rails application.
	</resource>

	<resource resource-category="Learn">
	  Read the <a href="http://guides.rails.info/3_0_release_notes.html">Rails 3 release notes</a> for
	  a comprehensive and up-to-date list of additions, enhancements, and changes in the code.
	</resource>

	<resource resource-category="Learn">
	  Rails 3 integrates many of the features of the Merb framework. Point your browser
	  to the <a href="http://merbivore.com/">Merb home page</a> to discover its
	  history and features.
	</resource>

	<resource resource-category="Learn">
	  Read <a href="http://www.jeremymcanally.com/">Jeremy Macanally's blog</a> for tutorials and expert
	  insights.
	</resource>

	<resource resource-category="Learn">
	  <a href="http://yehudakatz.com/">Yehuda Katz's</a> is a core Rails contributor and a chief architect of the
	  integration of Merb and Rails.
	</resource>

	<resource resource-category="Learn">
	  <a href="http://blog.envylabs.com">Gregg Pollack</a> hosts a weekly podcast and occassional screencasts
	  about Rails.
	</resource>

	<resource resource-category="Learn">
	  <a href="http://www.pragprog.com/titles/rails3/agile-web-development-with-rails-third-edition/"><i>Agile Web Development with Rails</a> (ISBN 978-1-93435-616-6) is an invaluable resource if you want to learn Rails.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www.ibm.com/developerworks/web/">developerWorks Web development
			zone</a>: The Web development zone is packed with tools and information for
			Web 2.0 development.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www.ibm.com/developerworks/offers/techbriefings/?S_TACT=105AGX44&amp;S_CMP=ART">IBM
			technical events and webcasts</a>: Stay current with developerWorks' Technical
			events and webcasts.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www.ibm.com/developerworks/apps/SendTo?bookstore=safari">Technology
			bookstore</a>: Browse the technology bookstore for books on this and other
			technical topics.
	</resource>

	<resource resource-category="Get products and technologies">
		<a href="http://www.ibm.com/developerworks/downloads/?S_TACT=105AGX01&amp;S_CMP=ART">IBM
			product evaluation versions</a>: Download these versions today and get your hands
			on application development tools and middleware products from DB2<reg />,
			Lotus<reg />, Rational<reg />, Tivoli<reg />, and WebSphere<reg />.
	</resource>

	<resource resource-category="Discuss">
		<a href="http://www.ibm.com/developerworks/blogs/">developerWorks blogs</a>: Check out
			developerWorks blogs and get involved in the
			<a href="http://www.ibm.com/developerworks/community">developerWorks community</a>.
	</resource>
</resources>

	</dw-article>
</dw-document>
