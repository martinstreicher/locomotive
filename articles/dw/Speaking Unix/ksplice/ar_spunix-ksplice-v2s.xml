<?xml-stylesheet type="text/xsl" href="../xsl/5.12/dw-document-html-5.12.xsl"?>
<dw-document xmlns:dw="http://www.ibm.com/developerWorks/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../schema/5.12/dw-document-5.12.xsd">

<dw-article local-site="worldwide" skill-level="3">
<id cma-id="12345" domino-uid="" content-id="" original="yes" />
<keywords content="Martin Streicher, UNIX, speaking UNIX, Ksplice"/>

<meta-dctype>
	<cma-defined-type />
</meta-dctype>

<meta-dcsubject>
	<cma-defined-subject />
</meta-dcsubject>

<meta-last-updated day="19" month="03" year="2010" initials="ma" />

<content-area-primary name="aix" />

<title>Speaking UNIX 15: Get to know Ksplice</title>
	<subtitle>Give reboots the boot</subtitle>

<author jobtitle="Software Developer" email-cc="" email="martin.streicher@gmail.com">
	<bio>Martin Streicher is a freelance Ruby on Rails developer and the former Editor-in-Chief of
		<i><a href="http://www.linux-mag.com">Linux Magazine</a>.</i> Martin holds a
		Masters of Science degree in computer science from Purdue University and has
		programmed UNIX-like systems since 1986. He collects art and toys. You can reach
		Martin at <a href="mailto:martin.streicher@gmail.com">martin.streicher@gmail.com</a>.
	</bio>
	<img alt="Martin Streicher" src="images\Bio_mstreicher.jpg"/>
	<author-name>
		<GivenName>Martin</GivenName>
		<FamilyName>Streicher</FamilyName>
	</author-name>
	<company-name>Pixel, Byte, and Comma</company-name>
</author>

<date-published day="22" month="03" year="2010" />

<abstract></abstract>
<abstract-extended>Ksplice applies kernel patches on-the-fly<mdash />no reboot required<mdash />in
	a fraction of a second. Here's a hands-on guide to performing painless system updates.
</abstract-extended>

<docbody>
	<p>UNIX<reg /> machines run and run (and run). A desktop or portable system can be left on for
		weeks, even months, and server uptime can stretch to a year or more. Indeed, if you
		could preclude hardware failures and Mother Nature, a UNIX system might run perennially.
		Alas, hardware is imperfect, Mother Nature has a mind of her own, and software suffers
		from bugs. Gear requires replacement. Storms happen. And systems require patches and
		restarts. Much like death and taxes, downtime is a certainty.
	</p>

<sidebar width="30%">
	<heading refname="fua" type="sidebar">Frequently used acronyms</heading>
		<ul>
			<li><b>GUI:</b> Graphical user interface</li>
		</ul>
</sidebar>

	<p>However, unlike death and taxes, you can <i>minimize</i> downtime. Proactive and regular
		system maintenance and hot spares boost availability, as does a robust data center
		replete with backup power and redundant connections to the Internet. Thankfully, too,
		most applications and libraries can be updated seamlessly and on demand using tools
		such as rpm, Aptitude, and yum.
	</p>
	<p>Unfortunately, kernel updates<mdash />modifications to address vulnerabilities and flaws
		in the core system software<mdash />aren't so painless. A kernel update is very disruptive,
		requiring scheduled downtime to temporarily halt all services on each and every machine
		affected. Although such upkeep is necessary and vital, keeping pace
		with kernel updates can nonetheless make operations something akin to a yo-yo. To wit,
		the time lines in <a href="#fig1">Figure 1</a> show the frequency of critical kernel updates
		for a number of popular operating systems between January 2009 and February 2010. Each
		cycle icon represents a mandatory restart (image courtesy of Ksplice, Inc.).
	</p>

		<figure>
			<heading refname="fig1" type="figure">Figure 1. Frequency of kernel updates
				by operating system
			</heading>
			<img alt="Frequency of kernel updates by operating system"
				src="images/reboots-required.png" width="572" height="337"/>
		</figure>

	<p>But now, you can patch your kernel as it runs, eliminating the otherwise wholesale interruption
		caused by a restart. In other words, scheduled upgrades no longer need a schedule.</p>
	<p>
		Ksplice is a set of tools to patch the kernel <i>in situ,</i> as it's running<mdash />no reboot
		required. Given an existing kernel, its source code, and one or more unified diff files (a
		unified diff is the canonical form for kernel patches), Ksplice replaces existing, errant object
		code in the resident kernel with new object code. Ksplice can replace both program code and data
		structures. Better yet, a kernel <i>splice</i> interrupts normal system operation for a mere
		fraction of a millisecond, leaving daemons, processes, and connections intact.
	</p>
	<p>Let's look briefly at how Ksplice works and learn to use its tools to keep a kernel up to date.
		There are three ways to use Ksplice: through a GUI; through equivalent, high-level
		command-line utilities; and, if you have the source to your kernel, through the raw Ksplice
		tools. A Ubuntu version 9.04 or version 9.10 user, for example, can download and install
		a point-and-click application to choose and apply kernel modifications. All three variants
		of Ksplice are introduced here.
	</p>

	<heading refname="live_kernel" type="major">Patching a live kernel</heading>
		<p>Put succinctly and simply, Ksplice patches a running kernel by replacing one or more
			vulnerable or faulty functions with newer, correct implementations. To effect the
			substitution (again, oversimplifying for the moment,) the tool amends a running
			kernel image with the new functions' object code and injects a jump at the head
			of each existing function to call its new counterpart. Virtually the entire kernel
			remains unchanged, save for the new object code and a few instructions to redirect
			the function calls.
		</p>
		<p>Additionally, Ksplice can affect data structures, albeit with a little extra programming.
			Ksplice can run code during an update to facilitate such a change. Ksplice also provides
			a pair of hooks to run setup and tear-down code immediately before and immediately
			after the kernel is updated. You can also add new functions to augment the kernel:
			New functions simply have no counterparts in the original kernel.
		</p>
		<p>You can apply Ksplice to virtually any kernel, even those that shipped before Ksplice was
			developed. To splice a kernel, you must have its source code, the set of patches
			you want to apply, and a compiler capable of isolating each function and data structure
			in the kernel in its own section in the object code. For example, the GNU Compiler
			Collection (GCC) provides the flags <code type="inline">-ffunction-sections</code>
			and <code type="inline">-fdata-sections</code>, respectively, for those exact
			purposes. (Other compilers, such as the Intel<reg /> <code type="inline">C</code>
			Compiler, have similar capabilities.) Such "modular" object code is more easily
			manipulated by Ksplice. The running kernel to be patched need not have been
			compiled with the same special options.
		</p>
		<p>Ksplice refers to the kernel compiled from the original source as the <i>pre</i> kernel.
			The new kernel built from the patched source is the <i>post</i> kernel. And the
			running kernel is nicknamed the <i>run</i> kernel. Ksplice fails if pre is not the
			same as run<mdash />a clear indication that the source code does not match the
			running kernel. Apart from that special condition, Ksplice compares pre to post, and
			each difference becomes a splice. All splices are bundled into a single object file
			ready to be injected into the kernel.
		</p>
		<p>Ksplice uses the <code type="inline">stop_machine</code> feature (or its equivalent,
			depending on your flavor of UNIX) to prepare to splice new code. Think of
			<code type="inline">stop_machine</code> as a traffic signal: It allows a sole CPU
			to proceed while idling all others. After executing <code type="inline">stop_machine</code>,
			Ksplice analyzes each function marked for replacement to determine whether it is
			active. If even a single thread's instruction pointer refers to a function's code in
			memory or a single thread's kernel stack refers to a return address within the
			function, the function is considered active and cannot be replaced. Otherwise,
			the function is deemed inactive and is replaced. Ksplice tries repeatedly to
			make a replacement but may ultimately abandon the effort. If so, it reports an
			error and stops.
		</p>

	<heading refname="easy" type="major">Kernel patching was never this easy</heading>
		<p>If you run one of the more popular UNIX distributions, Ksplice couldn't be easier to
			use. The authors of Ksplice provide a client application customized for your
			distro. You can keep your kernel up to date for a nominal fee of less than US$5 per
			system per month. You can find a list of supported operating systems on the Ksplice
			Web site (see <a href="#resources">Resources</a>). The Ksplice software is available
			free of charge for Ubuntu 9.04 (Jaunty Jackalope) and Ubuntu 9.10.
		</p>
		<p>For demonstration purposes, this article uses Ubuntu 9.10 and splices its kernel. To use
			Ksplice on Ubuntu, you must download and install the Ksplice Uptrack client (see
			<a href="#resources">Resources</a> for a link). Uptrack manages the rebootless
			kernel updates available for your system. You can view and install Ksplice updates,
			and you can review alerts when new kernel updates are available. The software is
			provided as a Debian package. (You can also download the software from the
			command line using a tool such as <code type="inline">wget</code> or cURL.)
		</p>
		<p>Next, use <code type="inline">gdebi</code> to install the package. If you do not yet
			have <code type="inline">gdebi</code>, you can install it with the command:
		</p>

<code type="section" width="65%">
sudo apt-get install gdebi
</code>

		<p>If you prefer a graphical client, you can install Ksplice with the command:</p>

<code type="section" width="65%">
sudo gdebi-gtk ksplice-uptrack.deb
</code>

		<p><code type="inline">gdebi</code> installs Uptrack and its dependencies, which include
			<code type="inline">kerneloops</code>, the YAML library, Python, and the cURL
			library (see <a href="#list1">Listing 1</a>).
		</p>

<code type="section" width="65%">
	<heading refname="list1" type="code">Listing 1. Installing Uptrack and its dependencies</heading>
$ wget http://www.ksplice.com/uptrack/dist/karmic/ksplice-uptrack.deb
$ sudo gdebi ksplice-uptrack.deb
Reading package lists: Done
Reading state information: Done
Reading state information: Done
Reading state information: Done
Reading state information: Done

Requires the installation of the following packages:
kerneloops  curl  libcurl3  python-yaml  libyaml-0-1
Client for the Ksplice Uptrack service
 The Ksplice Uptrack service enables you to keep your system
 up to date and secure without rebooting it.
This package contains the command-line and graphical Uptrack clients.
Do you want to install the software package? [y/N]:y
...
</code>

		<p>After you accept the terms of service and the installation finishes, Uptrack launches
			automatically. The installer also places a Ksplice icon<mdash />a large letter K in
			the task bar<mdash />for easy access. <a href="#fig2">Figure 2</a> shows the Uptrack
			Manager launching for the first time on a clean installation of Ubuntu 9.10. To
			patch the kernel, click <b>Install all updates</b>.
		</p>

			<figure>
				<heading refname="fig2" type="figure">Figure 2. Launching the Uptrack Manager</heading>
				<img alt="Launching the Uptrack Manager" src="images/ksplice.jpg" width="572" height="442"/>
			</figure>

		<p>A progress bar, shown in <a href="#fig3">Figure 3</a>, echoes each patch as it is installed.
			Patching the kernel takes just a few moments, even when a good number of
			patches are outstanding. And, of course, no reboot is required.
		</p>

			<figure>
				<heading refname="fig3" type="figure">Figure 3. The Ksplice progress bar</heading>
				<img alt="Ksplice progress bar" src="images/progress.jpg" width="572" height="445"/>
			</figure>

		<p>When finished, the Uptrack Manager refreshes to show you the new state of your system,
			as shown in <a href="#fig4">Figure 4</a>. A green check mark indicates that the named
			patch was applied successfully and is now live in your running kernel. Click <b>Check</b>
			to look for additional kernel patches available for your system. Click <b>Close</b> to
			dismiss the window. It is not necessary to run <code type="inline">uptrack-manager</code>
			as root; the software prompts for an administrator's password before any modifications
			are applied.
		</p>

			<figure>
				<heading refname="fig4" type="figure">Figure 4. The current system state in Uptrack Manager</heading>
				<img alt="Current system state" src="images/after.jpg" width="572" height="442"/>
			</figure>

		<p>You can open Uptrack any time later with the command <code type="inline">uptrack-manager</code>,
			or click on the <b>K</b> icon on the taskbar. Ksplice runs continuously once launched.
			If you prefer, you can configure Ksplice to apply patches to the running kernel
			automatically or just alert you when updates become available. For example, to
			choose the former, edit the file  /etc/uptrack/uptrack.conf and change the
			<code type="inline">autoinstall</code> line to read:
		</p>

<code type="section" width="65%">
autoinstall = yes
</code>

		<p>In addition to <code type="inline">update-manager</code>, Uptrack includes three other
			command-line utilities for convenience. (These utilities are different than the tools
			used to work with kernel source directly, which are demonstrated in the next
			section). <code type="inline">uptrack-upgrade</code> installs the latest available
			kernel updates. <code type="inline">uptrack-remove <i>id</i></code> removes the
			kernel update tagged with ID <i><code type="inline">id</code></i>. If you type
			<code type="inline">uptrack-remove --all</code>, <code type="inline">uptrack-remove</code>
			purges all installed updates. <code type="inline">uptrack-show</code> shows a
			manifest of updates that are currently installed.
		</p>
		<p>It is essential to remember that Uptrack does not usurp the role of your distribution's
			standard package manager. All changes that Ksplice makes are applied to the running
			kernel and exist in memory only. Therefore, all Ksplice patches are lost upon
			shutdown. Continue to update your kernel on disk with a traditional software
			maintenance procedure, such as running:
		</p>

<code type="section" width="65%">
apt-get update; apt-get upgrade
</code>

		<p>as root on a regular basis or when your distribution informs you of new system updates.
			Keeping the kernel on disk up to date ensures that your system boots the best
			kernel available when your system eventually requires a restart.
		</p>

	<heading refname="custom_kernels" type="major">Updating custom kernels</heading>
		<p>Uptrack Manager is a convenient option for desktop and server computers based on
			kernels built and distributed by a vendor or a community project. It won't work,
			though, if your kernel is customized and built locally, because Uptrack cannot
			compare your kernel to a known, published operating system to generate splices.
			However, you can use Ksplice's "primitive" utilities to analyze public patches and
			create your own splices.
		</p>
		<p>Describing how to build a kernel is beyond the scope of this article. If you're unfamiliar
			with the process, there are excellent instructions and a good number of
			satisfactory tutorials scattered across the Internet. Instead, let's focus on the
			tools Ksplice provides and how to proceed once you are able to build any kernel.
		</p>
		<p>Ksplice provides a utility named <code type="inline">ksplice-create</code> to create
			kernel splices. The command requires two inputs: a patch file and the entire source
			tree for the running kernel, including any previous patches that have already been
			applied. Given the current source code and the patches, Ksplice generates two
			kernels, as mentioned above, and compares the revision to its original. The output
			of <code type="inline">ksplice-create</code> is a splice that can be applied with
			<code type="inline">ksplice-apply</code>. You can redact a splice from the kernel
			with <code type="inline">ksplice-remove</code>.
		</p>
		<p>Here is an example (taken from the authors' academic paper and used with express
			permission) that creates an update for the "prctl vulnerability," CVE-2006-2451,
			using a patch file called <i>prctl</i> and a kernel source directory ~/src:
		</p>

<code type="section" width="65%">
$ ksplice-create --patch=prctl ~/src
Ksplice update tarball written to ksplice-8c4o6u.tar.gz
$ sudo ksplice-apply ./ksplice-8c4o6u.tar.gz
Done!
</code>

		<p>The former command generates a tarball of object code, ksplice-8c4o6u.tar.gz, to be
			patched into the kernel. The second command reads the tarball, calculates the
			renovations required, and applies the splice.
		</p>

	<heading refname="24" type="major">Twenty-four, Seven, Three Hundred Sixty-five</heading>
		<p>Ksplice is a proven technology. According to the authors' original paper and technical
			study, Ksplice was able to dynamically patch the Linux<reg /> kernel with all
			security and functional patches issued between 2006 and 2008. Of those, more than
			two-thirds required no special code to update the kernel. Of the remaining patches,
			special programming amounted to an average of 17 lines of code per patch.
		</p>
		<p>Linux was chosen to prove the Ksplice approach. The Linux source is widely and frequently
			vetted for flaws and is patched often to quickly address shortcomings. However,
			Ksplice can readily be adapted to any kernel for which source code is available,
			including BSD and Sun Solaris. Ksplice supports x86, x86_64, and ARM processors,
			too.
		</p>
</docbody>

<resources>
	<resource resource-category="Learn">
		<a href="http://www-128.ibm.com/developerworks/views/aix/libraryview.jsp?search_by=speaking+UNIX+Part">Speaking
			UNIX</a>: Check out other parts in this series.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www.ksplice.com/" >Ksplice</a>: Learn more about Ksplice from the tool's
			site.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www.ksplice.com/doc/ksplice.pdf">Ksplice technical paper</a>: Read the
			technical paper to learn more about how Ksplice works.
	</resource>

	<resource resource-category="Learn">
		<a href="http://kernel.org/">kernel.org</a>: Find information about the Linux kernel and
			the kernel source code archive.
	</resource>

	<resource resource-category="Learn">
		<a href="http://cve.mitre.org/">Common Vulnerabilities and Exposures</a>: An exhaustive list
			of computer vulnerabilities is available from the CVE site. Each entry in the database
			includes a brief description of the security vulnerability or exposure and any
			pertinent references.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www-128.ibm.com/developerworks/aix/">AIX and UNIX developerWorks
			zone</a>: The AIX and UNIX zone provides a wealth of information relating to
			all aspects of AIX systems administration and expanding your UNIX skills.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www-128.ibm.com/developerworks/aix/newto/">New to AIX and UNIX</a>?
			Visit the New to AIX and UNIX page to learn more.
	</resource>

	<resource resource-category="Learn">
		<a href="http://www.ibm.com/developerworks/apps/SendTo?bookstore=safari">Technology
			bookstore</a>: Browse the technology bookstore for books on this and other
			technical topics.
	</resource>

	<resource resource-category="Get products and technologies">
		<a href="http://www.ksplice.com/uptrack/download?now=y">Ksplice Uptrack</a>: Download the
			Uptrack software suitable for your system.
	</resource>

	<resource resource-category="Get products and technologies">
		<a href="http://www.github.com">Github</a>: Github houses thousands of Git repositories,
			including the personal dot files of many expert users. Search for "dot files" to find
			examples. (You can learn more about Git online and in the
			<a href="http://github.com/guides/home">Github Guides</a>.)
	</resource>

	<resource resource-category="Discuss">
		<a href="http://www.ibm.com/developerworks/blogs/">developerWorks blogs</a>: Check out
			our blogs and get involved in the <a href="http://www.ibm.com/developerworks/community">developerWorks
			community</a>.
	</resource>

	<resource resource-category="Discuss">
		Participate in the AIX and UNIX forums:
			<ul>
				<li><a href="http://www-128.ibm.com/developerworks/forums/dw_forum.jsp?forum=747&amp;amp;cat=72">AIX
					5L<mdash />technical forum</a>
				</li>
				<li><a href="http://www-128.ibm.com/developerworks/forums/dw_forum.jsp?forum=905&amp;amp;cat=72">AIX
					for Developers Forum</a>
				</li>
				<li><a href="http://www-128.ibm.com/developerworks/forums/dw_forum.jsp?forum=907&amp;amp;cat=72">Cluster
					Systems Management</a>
				</li>
				<li><a href="http://www-128.ibm.com/developerworks/forums/dw_forum.jsp?forum=935&amp;amp;cat=72">IBM
					Support Assistant</a>
				</li>
				<li><a href="http://www-128.ibm.com/developerworks/forums/dw_forum.jsp?forum=749&amp;amp;cat=72">Performance
					Tools<mdash />technical</a>
				</li>
				<li><a href="http://www-128.ibm.com/developerworks/forums/dw_auforums.jsp">More AIX and UNIX
					forums</a>
				</li>
			</ul>
	</resource>
</resources>

	</dw-article>
</dw-document>
