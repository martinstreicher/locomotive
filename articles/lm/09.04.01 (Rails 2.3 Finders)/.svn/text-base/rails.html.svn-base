<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Rails 2.3: Easy Access</title>
	<style>
	body {
		font-family: Georgia, serif;
		font-size: 80%;
		margin: 25px;
	}
	
	a {
		text-decoration: none;
		border-bottom: 1px dotted blue;
	}
	
	h1,h2,h3,h4, p.close {
		font-family: Tahoma, Arial, Verdana, sans-serif;
	}
	
	h2 {
		font-size: 95%;
		margin-top: 2em;
	}
	
	h4 {
		font-size: 85%;
	}
	
	img {
		border: none;
	}
	
	li {
		margin-bottom: 1em;
	}
	
	p.image {
		text-align: center;
	}
	
	tt, pre {
		font-family: Courier, sans-serif;
		font-size: 85%;
	}
	
	p.close {
		border-top: 1px solid black;
		padding: 5px 0px;
		margin-top: 2em;
		font-size: smaller;
	}

	pre {
		background: black;
		color: white;
  	padding: 5px 10px;
	}
	
	pre.list {
		background: white;
		color: black;
		border: 1px solid black;
		padding: 5px 10px;
	}
	
	th, td {
		padding: 4px 12px;
		font-size: 80%;
	}
	
	th {
		text-align: left;
		text-transform: uppercase;
	}
	
</style>
</head>
<body>

<h1>
	Rails 2.3 Makes Finders Fancier
	</h1>
	
<p class="byline">
	By Martin Streicher
	</p>
	
<p>
	<a href="http://rubyonrails.org/">Rails 2.3</a> was released two weeks ago and the <a href="http://guides.rubyonrails.org/2_3_release_notes.html">list of additions and refinements</a> is expansive. Some of the changes I'm enamored of include nested attributes and the complementary nested object forms, integration of Rails Metal, and official support of application templates. 
	</p>
	
<ul>
	<li>Nested attributes and nested object forms simplify all the code associated with a form that contains more than one model. Validation occurs en masse in the model; a form can nest models to any depth; and the controller requires no additional code to process nested objects.</li>  
	
	<li>Rails Metal is aptly named since its intent is to speedily process a request against "bare metal", or without the incumbent Rails overhead. Metal is ideal for AJAX and APIs, where you typically don't need to fuss much with the request -- just let the endpoint interpret the incoming URL and return some data.</li>
	
	<li>An application template is a boilerplate for a new Rails application. Define what plug-ins you want to appear in new applications and from then on, the <i>rails</i> command includes those automatically. Better yet, you can apply an application template to an existing application with a new <i>rake</i> task. No more re-generating the wheel!</li>
	</ul>
	
<p>
	I'll write extensively on each of these topics in the immediate future. Here, I want to focus on some smaller-scale improvements to ActiveRecord that will  likely improve more of your Rails code. 
	</p>


<h2>
	A little background on scope
	</h2>
	
<p>
	Rails 2.1 introduced <i>named scopes</i>, essentially a shorthand for a set of find conditions. For example, here is a simple named scope named <tt>active</tt> to find all accounts where the active field (a flag) is true.
	</p>
	
<pre class="list">
class Account < ActiveRecord::Base 
  named_scope :active, :conditions => { :active => true }
end
</pre>
	
<p>	
	Once defined, a named scope can be used exactly as you might use <tt>Account.all</tt> or <tt>Account.first</tt> (which are also scopes). For example, this code iterates over all active accounts:
	</p>
	
<pre class="list">
Acccount.active.each do |account|
 ...
end
</pre>
	
<p>
	The shorthand is convenient to write and easy to read, but the real power of named scopes lay in chaining more than one together. 
	</p>
	
<p>
	For instance, if I create another named_scope called <tt>platinum</tt> to yield those accounts that pay for the highest tier of services, I can find all active platinum accounts with the natural statement <tt>@accounts = Account.active.platinum</tt>. 
	</p>
	
<p>
	When I read "scope", I think <i>filter</i>. A scope constrains results to some specification. A chain of named scopes is an increasingly narrow filter. 
	</p>
	
<p>
	Rails 2.3 adds a number of other features akin to named scopes to simplify find. A model may now have a <i>default scope</i>. Rails now supports <i>dynamic scopes</i>. And, to ease demands on memory, you can now find records in <i>batches</i>. Let's look briefly at each feature. 
	</p>
	
	
<h2>
	Default scope
	</h2>
	
<p>
	A default scope, as you might guess from its name, defines a default set of find conditions for a model. Continuing the accounts example from above, if I want to always enumerate accounts sorted by name, I'd add the bolded line to my Account model:
	</p>
	
<pre class="list">
class Account < ActiveRecord::Base 
  <b>default_scope :order => 'name ASC'</b>
end
</pre>

<p>
	Now, unless I override the <tt>:order</tt> condition, the results of every find are sorted by name in ascending order. Indeed, even the result of <tt>Account.active.platinum</tt> are affected by this default scope. 
	</p>


<h2>
	Dynamic scope
	</h2>
	
<p>
	Next, is the dynamic scope, a hybrid of a dynamic finder method and a named scope. Again, you've likely used a dynamic finder to look up data. For instance, if the <tt>Account</tt> model has a field <tt>tier</tt>, you could write <tt>Account.find_by_tier('platinum')</tt> to find all accounts with platinum status. <tt>find_by_tier()</tt> is not defined anywhere&mdash;Rails realizes it for you as needed. 
	</p>
	
<p>
	A dynamic scope is realized on the fly, too. And like a named scope, it filters results. Thus, I can find active gold status accounts by writing this:
	</p>
	
<pre class="list">
Account.scoped_by_active(true).scoped_by_tier('gold')
</pre>
	
<p>
	This statement is the equivalent of...
	</p>
	
<pre class="list">
Account.find(:all, :conditions => { :active => true, :tier => 'gold' })
</pre>

<p>
	... but a lot more friendly to read.
	</p>
	

<h2>
	Batches
	</h2>
	
<p>
	The last convenience to mention doesn't save typing, but it does save memory. You can now retrieve records in batches, ideal if you have a great deal of records in a table. The new methods are <tt>find_in_batches()</tt> and <tt>find_each</tt>. The former collects 1,000 records at a time, or some other amount if you specify <tt>:batch_size</tt>. The latter returns a record at a time (but internally, this uses <tt>find_in_batches()</tt> for efficiency).
	</p>

<p>
		To process all active accounts in large batches, you can write:
		</p>
		
<pre class="list">
Account.find_in_batches(:conditions => {:active => true}) do |accounts|  
  accounts.each { |account| account.renew_subscription }  
end  
</pre>

<p>
	You cannot use <tt>:limit</tt> nor <tt>:order</tt> with <tt>find_in_batches()</tt>. Most of the other find options are acceptable, though.  
	</p>
	
<p>
	Use of <tt>find_each()</tt> is similar. 
	</p>
	
<pre class="list">
Account.find_each(:conditions => {:active => true}) do |account|  
  account.renew_subscription 
end  
</pre>


<h2>
	Finding my way
	</h2>
	
<p>
	As I said, these new find features are relatively small, incremental improvements, but I find these much easier and natural to express what I am trying to find. I can think of several places in my own code that can benefit from the clarity. Lord knows I need the help!
	</p>

<p>
	In coming weeks I'll present more about Rails 2.3 and also wander all over the World Wide Web to find tools, techniques, and tinkering to entertain you. 
	</p>
	
<p class="close">
	Martin Streicher is a freelance Ruby on Rails developer, the author of IBM developerWorks's monthly <i>Speaking Unix</i> column, and a widely-published author on open source technologies. He is also Editor-in-Chief Emeritus of <i>Linux Magazine</i> and has the fez to prove it. You can reach Martin at martin.streicher@gmail.com. 
	</p>
</body>
</html>
